// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhlegmaticOne.UniDocuments.Data.EntityFramework.Context;

#nullable disable

namespace PhlegmaticOne.UniDocuments.Data.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240227185413_IdToIntAndAddMetrics")]
    partial class IdToIntAndAddMetrics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupStudyActivity", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivitiesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupStudyActivity");
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastName");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("StudyActivities", (string)null);
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLoaded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MetricsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("MetricsId")
                        .IsUnique();

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("StudyDocuments", (string)null);
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocumentMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FingerprintsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WinnowingData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudyDocumentMetrics", (string)null);
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocumentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudyDocumentReports", (string)null);
                });

            modelBuilder.Entity("GroupStudyActivity", b =>
                {
                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.StudyActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.Student", b =>
                {
                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocument", b =>
                {
                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.StudyActivity", "Activity")
                        .WithMany("Documents")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocumentMetrics", "Metrics")
                        .WithOne("Document")
                        .HasForeignKey("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocument", "MetricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocumentReport", "Report")
                        .WithOne("Document")
                        .HasForeignKey("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocument", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhlegmaticOne.UniDocuments.Domain.Models.Student", "Student")
                        .WithMany("Documents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Metrics");

                    b.Navigation("Report");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.Student", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyActivity", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocumentMetrics", b =>
                {
                    b.Navigation("Document")
                        .IsRequired();
                });

            modelBuilder.Entity("PhlegmaticOne.UniDocuments.Domain.Models.StudyDocumentReport", b =>
                {
                    b.Navigation("Document")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
